// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: network.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_network_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_network_2eproto;
namespace jokinojo {
class RequestData;
struct RequestDataDefaultTypeInternal;
extern RequestDataDefaultTypeInternal _RequestData_default_instance_;
class ResponseData;
struct ResponseDataDefaultTypeInternal;
extern ResponseDataDefaultTypeInternal _ResponseData_default_instance_;
}  // namespace jokinojo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace jokinojo {
enum RequestData_DataType : int {
  RequestData_DataType_CREATE_ROOM = 0,
  RequestData_DataType_JOIN_ROOM = 1,
  RequestData_DataType_QUIT = 2,
  RequestData_DataType_SYNC = 3,
  RequestData_DataType_VIDEO_NAME = 4,
  RequestData_DataType_READY = 5,
  RequestData_DataType_CHAT = 6,
  RequestData_DataType_RequestData_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RequestData_DataType_RequestData_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RequestData_DataType_IsValid(int value);
extern const uint32_t RequestData_DataType_internal_data_[];
constexpr RequestData_DataType RequestData_DataType_DataType_MIN = static_cast<RequestData_DataType>(0);
constexpr RequestData_DataType RequestData_DataType_DataType_MAX = static_cast<RequestData_DataType>(6);
constexpr int RequestData_DataType_DataType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
RequestData_DataType_descriptor();
template <typename T>
const std::string& RequestData_DataType_Name(T value) {
  static_assert(std::is_same<T, RequestData_DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return RequestData_DataType_Name(static_cast<RequestData_DataType>(value));
}
template <>
inline const std::string& RequestData_DataType_Name(RequestData_DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RequestData_DataType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool RequestData_DataType_Parse(absl::string_view name, RequestData_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestData_DataType>(
      RequestData_DataType_descriptor(), name, value);
}
enum ResponseData_DataType : int {
  ResponseData_DataType_CREATE_ROOM = 0,
  ResponseData_DataType_JOIN_ROOM = 1,
  ResponseData_DataType_USER_LEFT = 2,
  ResponseData_DataType_SYNC = 3,
  ResponseData_DataType_VIDEO_NAME = 4,
  ResponseData_DataType_READY = 5,
  ResponseData_DataType_CHAT = 6,
  ResponseData_DataType_ResponseData_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseData_DataType_ResponseData_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseData_DataType_IsValid(int value);
extern const uint32_t ResponseData_DataType_internal_data_[];
constexpr ResponseData_DataType ResponseData_DataType_DataType_MIN = static_cast<ResponseData_DataType>(0);
constexpr ResponseData_DataType ResponseData_DataType_DataType_MAX = static_cast<ResponseData_DataType>(6);
constexpr int ResponseData_DataType_DataType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseData_DataType_descriptor();
template <typename T>
const std::string& ResponseData_DataType_Name(T value) {
  static_assert(std::is_same<T, ResponseData_DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return ResponseData_DataType_Name(static_cast<ResponseData_DataType>(value));
}
template <>
inline const std::string& ResponseData_DataType_Name(ResponseData_DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseData_DataType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ResponseData_DataType_Parse(absl::string_view name, ResponseData_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseData_DataType>(
      ResponseData_DataType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ResponseData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:jokinojo.ResponseData) */ {
 public:
  inline ResponseData() : ResponseData(nullptr) {}
  ~ResponseData() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResponseData(const ResponseData& from) : ResponseData(nullptr, from) {}
  inline ResponseData(ResponseData&& from) noexcept
      : ResponseData(nullptr, std::move(from)) {}
  inline ResponseData& operator=(const ResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseData& operator=(ResponseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseData* internal_default_instance() {
    return reinterpret_cast<const ResponseData*>(
        &_ResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResponseData& a, ResponseData& b) { a.Swap(&b); }
  inline void Swap(ResponseData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseData* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<ResponseData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseData& from) { ResponseData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "jokinojo.ResponseData"; }

 protected:
  explicit ResponseData(::google::protobuf::Arena* arena);
  ResponseData(::google::protobuf::Arena* arena, const ResponseData& from);
  ResponseData(::google::protobuf::Arena* arena, ResponseData&& from) noexcept
      : ResponseData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DataType = ResponseData_DataType;
  static constexpr DataType CREATE_ROOM = ResponseData_DataType_CREATE_ROOM;
  static constexpr DataType JOIN_ROOM = ResponseData_DataType_JOIN_ROOM;
  static constexpr DataType USER_LEFT = ResponseData_DataType_USER_LEFT;
  static constexpr DataType SYNC = ResponseData_DataType_SYNC;
  static constexpr DataType VIDEO_NAME = ResponseData_DataType_VIDEO_NAME;
  static constexpr DataType READY = ResponseData_DataType_READY;
  static constexpr DataType CHAT = ResponseData_DataType_CHAT;
  static inline bool DataType_IsValid(int value) {
    return ResponseData_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN = ResponseData_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX = ResponseData_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE = ResponseData_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
    return ResponseData_DataType_descriptor();
  }
  template <typename T>
  static inline const std::string& DataType_Name(T value) {
    return ResponseData_DataType_Name(value);
  }
  static inline bool DataType_Parse(absl::string_view name, DataType* value) {
    return ResponseData_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kUsernamesFieldNumber = 3,
    kUsernameFieldNumber = 4,
    kVideoNameFieldNumber = 7,
    kChatMessageFieldNumber = 8,
    kDataTypeFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kTimePositionFieldNumber = 5,
    kResumedFieldNumber = 6,
  };
  // repeated string usernames = 3;
  int usernames_size() const;
  private:
  int _internal_usernames_size() const;

  public:
  void clear_usernames() ;
  const std::string& usernames(int index) const;
  std::string* mutable_usernames(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usernames(int index, Arg_&& value, Args_... args);
  std::string* add_usernames();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_usernames(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& usernames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_usernames();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_usernames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_usernames();

  public:
  // optional string username = 4;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string videoName = 7;
  bool has_videoname() const;
  void clear_videoname() ;
  const std::string& videoname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_videoname(Arg_&& arg, Args_... args);
  std::string* mutable_videoname();
  PROTOBUF_NODISCARD std::string* release_videoname();
  void set_allocated_videoname(std::string* value);

  private:
  const std::string& _internal_videoname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_videoname(
      const std::string& value);
  std::string* _internal_mutable_videoname();

  public:
  // optional string chatMessage = 8;
  bool has_chatmessage() const;
  void clear_chatmessage() ;
  const std::string& chatmessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatmessage(Arg_&& arg, Args_... args);
  std::string* mutable_chatmessage();
  PROTOBUF_NODISCARD std::string* release_chatmessage();
  void set_allocated_chatmessage(std::string* value);

  private:
  const std::string& _internal_chatmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatmessage(
      const std::string& value);
  std::string* _internal_mutable_chatmessage();

  public:
  // .jokinojo.ResponseData.DataType dataType = 1;
  void clear_datatype() ;
  ::jokinojo::ResponseData_DataType datatype() const;
  void set_datatype(::jokinojo::ResponseData_DataType value);

  private:
  ::jokinojo::ResponseData_DataType _internal_datatype() const;
  void _internal_set_datatype(::jokinojo::ResponseData_DataType value);

  public:
  // optional int32 roomId = 2;
  bool has_roomid() const;
  void clear_roomid() ;
  ::int32_t roomid() const;
  void set_roomid(::int32_t value);

  private:
  ::int32_t _internal_roomid() const;
  void _internal_set_roomid(::int32_t value);

  public:
  // optional int32 timePosition = 5;
  bool has_timeposition() const;
  void clear_timeposition() ;
  ::int32_t timeposition() const;
  void set_timeposition(::int32_t value);

  private:
  ::int32_t _internal_timeposition() const;
  void _internal_set_timeposition(::int32_t value);

  public:
  // optional bool resumed = 6;
  bool has_resumed() const;
  void clear_resumed() ;
  bool resumed() const;
  void set_resumed(bool value);

  private:
  bool _internal_resumed() const;
  void _internal_set_resumed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:jokinojo.ResponseData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      75, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ResponseData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResponseData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> usernames_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr videoname_;
    ::google::protobuf::internal::ArenaStringPtr chatmessage_;
    int datatype_;
    ::int32_t roomid_;
    ::int32_t timeposition_;
    bool resumed_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class RequestData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:jokinojo.RequestData) */ {
 public:
  inline RequestData() : RequestData(nullptr) {}
  ~RequestData() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestData(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestData(const RequestData& from) : RequestData(nullptr, from) {}
  inline RequestData(RequestData&& from) noexcept
      : RequestData(nullptr, std::move(from)) {}
  inline RequestData& operator=(const RequestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestData& operator=(RequestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestData* internal_default_instance() {
    return reinterpret_cast<const RequestData*>(
        &_RequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RequestData& a, RequestData& b) { a.Swap(&b); }
  inline void Swap(RequestData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestData* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RequestData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestData& from) { RequestData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RequestData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "jokinojo.RequestData"; }

 protected:
  explicit RequestData(::google::protobuf::Arena* arena);
  RequestData(::google::protobuf::Arena* arena, const RequestData& from);
  RequestData(::google::protobuf::Arena* arena, RequestData&& from) noexcept
      : RequestData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DataType = RequestData_DataType;
  static constexpr DataType CREATE_ROOM = RequestData_DataType_CREATE_ROOM;
  static constexpr DataType JOIN_ROOM = RequestData_DataType_JOIN_ROOM;
  static constexpr DataType QUIT = RequestData_DataType_QUIT;
  static constexpr DataType SYNC = RequestData_DataType_SYNC;
  static constexpr DataType VIDEO_NAME = RequestData_DataType_VIDEO_NAME;
  static constexpr DataType READY = RequestData_DataType_READY;
  static constexpr DataType CHAT = RequestData_DataType_CHAT;
  static inline bool DataType_IsValid(int value) {
    return RequestData_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN = RequestData_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX = RequestData_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE = RequestData_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
    return RequestData_DataType_descriptor();
  }
  template <typename T>
  static inline const std::string& DataType_Name(T value) {
    return RequestData_DataType_Name(value);
  }
  static inline bool DataType_Parse(absl::string_view name, DataType* value) {
    return RequestData_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 2,
    kVideoNameFieldNumber = 6,
    kChatMessageFieldNumber = 7,
    kDataTypeFieldNumber = 1,
    kRoomIdFieldNumber = 3,
    kTimePositionFieldNumber = 4,
    kResumedFieldNumber = 5,
  };
  // optional string username = 2;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string videoName = 6;
  bool has_videoname() const;
  void clear_videoname() ;
  const std::string& videoname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_videoname(Arg_&& arg, Args_... args);
  std::string* mutable_videoname();
  PROTOBUF_NODISCARD std::string* release_videoname();
  void set_allocated_videoname(std::string* value);

  private:
  const std::string& _internal_videoname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_videoname(
      const std::string& value);
  std::string* _internal_mutable_videoname();

  public:
  // optional string chatMessage = 7;
  bool has_chatmessage() const;
  void clear_chatmessage() ;
  const std::string& chatmessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatmessage(Arg_&& arg, Args_... args);
  std::string* mutable_chatmessage();
  PROTOBUF_NODISCARD std::string* release_chatmessage();
  void set_allocated_chatmessage(std::string* value);

  private:
  const std::string& _internal_chatmessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatmessage(
      const std::string& value);
  std::string* _internal_mutable_chatmessage();

  public:
  // .jokinojo.RequestData.DataType dataType = 1;
  void clear_datatype() ;
  ::jokinojo::RequestData_DataType datatype() const;
  void set_datatype(::jokinojo::RequestData_DataType value);

  private:
  ::jokinojo::RequestData_DataType _internal_datatype() const;
  void _internal_set_datatype(::jokinojo::RequestData_DataType value);

  public:
  // optional int32 roomId = 3;
  bool has_roomid() const;
  void clear_roomid() ;
  ::int32_t roomid() const;
  void set_roomid(::int32_t value);

  private:
  ::int32_t _internal_roomid() const;
  void _internal_set_roomid(::int32_t value);

  public:
  // optional int32 timePosition = 4;
  bool has_timeposition() const;
  void clear_timeposition() ;
  ::int32_t timeposition() const;
  void set_timeposition(::int32_t value);

  private:
  ::int32_t _internal_timeposition() const;
  void _internal_set_timeposition(::int32_t value);

  public:
  // optional bool resumed = 5;
  bool has_resumed() const;
  void clear_resumed() ;
  bool resumed() const;
  void set_resumed(bool value);

  private:
  bool _internal_resumed() const;
  void _internal_set_resumed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:jokinojo.RequestData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RequestData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr videoname_;
    ::google::protobuf::internal::ArenaStringPtr chatmessage_;
    int datatype_;
    ::int32_t roomid_;
    ::int32_t timeposition_;
    bool resumed_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_network_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestData

// .jokinojo.RequestData.DataType dataType = 1;
inline void RequestData::clear_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = 0;
}
inline ::jokinojo::RequestData_DataType RequestData::datatype() const {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.dataType)
  return _internal_datatype();
}
inline void RequestData::set_datatype(::jokinojo::RequestData_DataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.dataType)
}
inline ::jokinojo::RequestData_DataType RequestData::_internal_datatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::jokinojo::RequestData_DataType>(_impl_.datatype_);
}
inline void RequestData::_internal_set_datatype(::jokinojo::RequestData_DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = value;
}

// optional string username = 2;
inline bool RequestData::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RequestData::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestData::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestData::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.username)
}
inline std::string* RequestData::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:jokinojo.RequestData.username)
  return _s;
}
inline const std::string& RequestData::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void RequestData::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* RequestData::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* RequestData::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:jokinojo.RequestData.username)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RequestData::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jokinojo.RequestData.username)
}

// optional int32 roomId = 3;
inline bool RequestData::has_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RequestData::clear_roomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t RequestData::roomid() const {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.roomId)
  return _internal_roomid();
}
inline void RequestData::set_roomid(::int32_t value) {
  _internal_set_roomid(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.roomId)
}
inline ::int32_t RequestData::_internal_roomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomid_;
}
inline void RequestData::_internal_set_roomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = value;
}

// optional int32 timePosition = 4;
inline bool RequestData::has_timeposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RequestData::clear_timeposition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeposition_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t RequestData::timeposition() const {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.timePosition)
  return _internal_timeposition();
}
inline void RequestData::set_timeposition(::int32_t value) {
  _internal_set_timeposition(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.timePosition)
}
inline ::int32_t RequestData::_internal_timeposition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeposition_;
}
inline void RequestData::_internal_set_timeposition(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeposition_ = value;
}

// optional bool resumed = 5;
inline bool RequestData::has_resumed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RequestData::clear_resumed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resumed_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RequestData::resumed() const {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.resumed)
  return _internal_resumed();
}
inline void RequestData::set_resumed(bool value) {
  _internal_set_resumed(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.resumed)
}
inline bool RequestData::_internal_resumed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resumed_;
}
inline void RequestData::_internal_set_resumed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resumed_ = value;
}

// optional string videoName = 6;
inline bool RequestData::has_videoname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RequestData::clear_videoname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.videoname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestData::videoname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.videoName)
  return _internal_videoname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestData::set_videoname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.videoname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.videoName)
}
inline std::string* RequestData::mutable_videoname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_videoname();
  // @@protoc_insertion_point(field_mutable:jokinojo.RequestData.videoName)
  return _s;
}
inline const std::string& RequestData::_internal_videoname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.videoname_.Get();
}
inline void RequestData::_internal_set_videoname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.videoname_.Set(value, GetArena());
}
inline std::string* RequestData::_internal_mutable_videoname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.videoname_.Mutable( GetArena());
}
inline std::string* RequestData::release_videoname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:jokinojo.RequestData.videoName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.videoname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.videoname_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RequestData::set_allocated_videoname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.videoname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.videoname_.IsDefault()) {
          _impl_.videoname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jokinojo.RequestData.videoName)
}

// optional string chatMessage = 7;
inline bool RequestData::has_chatmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RequestData::clear_chatmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chatmessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RequestData::chatmessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.RequestData.chatMessage)
  return _internal_chatmessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestData::set_chatmessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chatmessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:jokinojo.RequestData.chatMessage)
}
inline std::string* RequestData::mutable_chatmessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatmessage();
  // @@protoc_insertion_point(field_mutable:jokinojo.RequestData.chatMessage)
  return _s;
}
inline const std::string& RequestData::_internal_chatmessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chatmessage_.Get();
}
inline void RequestData::_internal_set_chatmessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chatmessage_.Set(value, GetArena());
}
inline std::string* RequestData::_internal_mutable_chatmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.chatmessage_.Mutable( GetArena());
}
inline std::string* RequestData::release_chatmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:jokinojo.RequestData.chatMessage)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.chatmessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chatmessage_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RequestData::set_allocated_chatmessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.chatmessage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatmessage_.IsDefault()) {
          _impl_.chatmessage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jokinojo.RequestData.chatMessage)
}

// -------------------------------------------------------------------

// ResponseData

// .jokinojo.ResponseData.DataType dataType = 1;
inline void ResponseData::clear_datatype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = 0;
}
inline ::jokinojo::ResponseData_DataType ResponseData::datatype() const {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.dataType)
  return _internal_datatype();
}
inline void ResponseData::set_datatype(::jokinojo::ResponseData_DataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.dataType)
}
inline ::jokinojo::ResponseData_DataType ResponseData::_internal_datatype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::jokinojo::ResponseData_DataType>(_impl_.datatype_);
}
inline void ResponseData::_internal_set_datatype(::jokinojo::ResponseData_DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.datatype_ = value;
}

// optional int32 roomId = 2;
inline bool ResponseData::has_roomid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ResponseData::clear_roomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ResponseData::roomid() const {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.roomId)
  return _internal_roomid();
}
inline void ResponseData::set_roomid(::int32_t value) {
  _internal_set_roomid(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.roomId)
}
inline ::int32_t ResponseData::_internal_roomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roomid_;
}
inline void ResponseData::_internal_set_roomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roomid_ = value;
}

// repeated string usernames = 3;
inline int ResponseData::_internal_usernames_size() const {
  return _internal_usernames().size();
}
inline int ResponseData::usernames_size() const {
  return _internal_usernames_size();
}
inline void ResponseData::clear_usernames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.usernames_.Clear();
}
inline std::string* ResponseData::add_usernames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_usernames()->Add();
  // @@protoc_insertion_point(field_add_mutable:jokinojo.ResponseData.usernames)
  return _s;
}
inline const std::string& ResponseData::usernames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.usernames)
  return _internal_usernames().Get(index);
}
inline std::string* ResponseData::mutable_usernames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:jokinojo.ResponseData.usernames)
  return _internal_mutable_usernames()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ResponseData::set_usernames(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_usernames()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.usernames)
}
template <typename Arg_, typename... Args_>
inline void ResponseData::add_usernames(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_usernames(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:jokinojo.ResponseData.usernames)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResponseData::usernames() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:jokinojo.ResponseData.usernames)
  return _internal_usernames();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResponseData::mutable_usernames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:jokinojo.ResponseData.usernames)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_usernames();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ResponseData::_internal_usernames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.usernames_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ResponseData::_internal_mutable_usernames() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.usernames_;
}

// optional string username = 4;
inline bool ResponseData::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ResponseData::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseData::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseData::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.username)
}
inline std::string* ResponseData::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:jokinojo.ResponseData.username)
  return _s;
}
inline const std::string& ResponseData::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void ResponseData::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* ResponseData::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* ResponseData::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:jokinojo.ResponseData.username)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ResponseData::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jokinojo.ResponseData.username)
}

// optional int32 timePosition = 5;
inline bool ResponseData::has_timeposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ResponseData::clear_timeposition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeposition_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ResponseData::timeposition() const {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.timePosition)
  return _internal_timeposition();
}
inline void ResponseData::set_timeposition(::int32_t value) {
  _internal_set_timeposition(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.timePosition)
}
inline ::int32_t ResponseData::_internal_timeposition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeposition_;
}
inline void ResponseData::_internal_set_timeposition(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeposition_ = value;
}

// optional bool resumed = 6;
inline bool ResponseData::has_resumed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ResponseData::clear_resumed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resumed_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ResponseData::resumed() const {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.resumed)
  return _internal_resumed();
}
inline void ResponseData::set_resumed(bool value) {
  _internal_set_resumed(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.resumed)
}
inline bool ResponseData::_internal_resumed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.resumed_;
}
inline void ResponseData::_internal_set_resumed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resumed_ = value;
}

// optional string videoName = 7;
inline bool ResponseData::has_videoname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ResponseData::clear_videoname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.videoname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResponseData::videoname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.videoName)
  return _internal_videoname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseData::set_videoname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.videoname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.videoName)
}
inline std::string* ResponseData::mutable_videoname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_videoname();
  // @@protoc_insertion_point(field_mutable:jokinojo.ResponseData.videoName)
  return _s;
}
inline const std::string& ResponseData::_internal_videoname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.videoname_.Get();
}
inline void ResponseData::_internal_set_videoname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.videoname_.Set(value, GetArena());
}
inline std::string* ResponseData::_internal_mutable_videoname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.videoname_.Mutable( GetArena());
}
inline std::string* ResponseData::release_videoname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:jokinojo.ResponseData.videoName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.videoname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.videoname_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ResponseData::set_allocated_videoname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.videoname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.videoname_.IsDefault()) {
          _impl_.videoname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jokinojo.ResponseData.videoName)
}

// optional string chatMessage = 8;
inline bool ResponseData::has_chatmessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ResponseData::clear_chatmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chatmessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResponseData::chatmessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:jokinojo.ResponseData.chatMessage)
  return _internal_chatmessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseData::set_chatmessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chatmessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:jokinojo.ResponseData.chatMessage)
}
inline std::string* ResponseData::mutable_chatmessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatmessage();
  // @@protoc_insertion_point(field_mutable:jokinojo.ResponseData.chatMessage)
  return _s;
}
inline const std::string& ResponseData::_internal_chatmessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chatmessage_.Get();
}
inline void ResponseData::_internal_set_chatmessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chatmessage_.Set(value, GetArena());
}
inline std::string* ResponseData::_internal_mutable_chatmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.chatmessage_.Mutable( GetArena());
}
inline std::string* ResponseData::release_chatmessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:jokinojo.ResponseData.chatMessage)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.chatmessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chatmessage_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ResponseData::set_allocated_chatmessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.chatmessage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatmessage_.IsDefault()) {
          _impl_.chatmessage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:jokinojo.ResponseData.chatMessage)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace jokinojo


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::jokinojo::RequestData_DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::jokinojo::RequestData_DataType>() {
  return ::jokinojo::RequestData_DataType_descriptor();
}
template <>
struct is_proto_enum<::jokinojo::ResponseData_DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::jokinojo::ResponseData_DataType>() {
  return ::jokinojo::ResponseData_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_network_2eproto_2epb_2eh
